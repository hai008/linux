
#user  nobody;
worker_processes  1;
master_process  off;  

error_log  /var/nginx/logs/error.log debug;
#access_log /var/nginx/logs/access.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

user root root;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;


    upstream mysqlbackend {
        drizzle_server 119.29.141.207:3306 dbname=recycle password=123456 user=hjx protocol=mysql;
        #drizzle_keepalive max=5 mode=single
    }

    upstream www.baidu.com{
    	server www.baidu.com;
    }
    upstream nginx.org1 {
        server nginx.org;
    }
    lua_package_path "/home/l/openresty-1.13.6.2/build/lua-resty-mysql-0.20/lib/resty/mysql.lua";
    server {
        listen       91;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        access_log /var/nginx/logs/access.log;

        location /regex{
            default_type text/html;
            content_by_lua_block{
                local regex=[[\d+]]
                local m = ngx.re.match("hell, 123", regex, "jo")
                if m
                    then

                    ngx.say(m[0])
                    ngx.say(package.path)
                else
                    ngx.say("not matched")
                end
            }
        }

        location /i {
                root   html;
                index  index.html index.htm;
            }
        location /test4 {
            default_type text/html;
            lua_code_cache off;
            content_by_lua_file "/home/l/openresty-1.13.6.2/lua/mysqltest.lua";
        }
        location /mysql {
            set $my_sql 'select sleep(10), Fuser_id from t_user limit 1';
            drizzle_query $my_sql;

            drizzle_pass mysqlbackend;

            drizzle_connect_timeout    60s;     # default 60s
            drizzle_send_query_timeout 60s;     # default 60s
            drizzle_recv_cols_timeout  60s;     # default 60s
            drizzle_recv_rows_timeout  60s;     # default 60s
            rds_json on;
        }
        location /test3 {
            #lua_code_cache off;
                default_type text/html;#可以直接输出到浏览器上
                content_by_lua '
                    local mysql = require "resty.mysql"
                    local db, err = mysql:new()
                    if not db then
                        ngx.say("failed to instantiate mysql: ", err)
                        return
                    end

                    db:set_timeout(1000) -- 1 sec

                    -- or connect to a unix domain socket file listened
                    -- by a mysql server:
                    --     local ok, err, errcode, sqlstate =
                    --           db:connect{
                    --              path = "/path/to/mysql.sock",
                    --              database = "ngx_test",
                    --              user = "ngx_test",
                    --              password = "ngx_test" }

                    local ok, err, errcode, sqlstate = db:connect{
                        host = "119.29.141.207",
                        port = 3306,
                        database = "recycle",
                        user = "hjx",
                        password = "123456",
                        charset = "utf8",
                        max_packet_size = 1024 * 1024,
                    }

                    if not ok then
                        ngx.say("failed to connect: ", err, ": ", errcode, " ", sqlstate)
                        return
                    end

                    ngx.say("connected to mysql.")

                    --local res, err, errcode, sqlstate =
                    --    db:query("drop table if exists cats")
                    --if not res then
                    --    ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                    --   return
                    --end

                    res, err, errcode, sqlstate =
                        db:query("create table if not exists cats "
                                .. "(id serial primary key, "
                                .. "name varchar(5))")
                    if not res then
                        ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                        return
                    end

                    ngx.say("table cats created.")

                    res, err, errcode, sqlstate =
                        db:query("insert into cats (name) "
                                .. "values (\'Bob\'),(\'\'),(null)")
                    if not res then
                        ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                        return
                    end

                    ngx.say(res.affected_rows, " rows inserted into table cats ",
                            "(last insert id: ", res.insert_id, ")")

                    -- run a select query, expected about 10 rows in
                    -- the result set:
                    res, err, errcode, sqlstate =
                        db:query("select * from cats order by id asc", 10)
                    if not res then
                        ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                        return
                    end

                    local cjson = require "cjson"
                    ngx.say("result: ", cjson.encode(res))

                    -- put it into the connection pool of size 100,
                    -- with 10 seconds max idle timeout
                    local ok, err = db:set_keepalive(10000, 100)
                    if not ok then
                        ngx.say("failed to set keepalive: ", err)
                        return
                    end

                    -- or just close the connection right away:
                    -- local ok, err = db:close()
                    -- if not ok then
                    --     ngx.say("failed to close: ", err)
                    --     return
                    -- end
                ';
            }
        location /test2 {
                default_type text/html;#可以直接输出到浏览器上
                content_by_lua '
                    local mysql = require "resty.mysql"
                    local db, err = mysql:new()
                    if not db then
                        ngx.say("failed to instantiate mysql: ", err)
                        return
                    end

                    db:set_timeout(1000) -- 1 sec

                    -- or connect to a unix domain socket file listened
                    -- by a mysql server:
                    --     local ok, err, errcode, sqlstate =
                    --           db:connect{
                    --              path = "/path/to/mysql.sock",
                    --              database = "ngx_test",
                    --              user = "ngx_test",
                    --              password = "ngx_test" }

                    local ok, err, errcode, sqlstate = db:connect{
                        host = "119.29.141.207",
                        port = 3306,
                        database = "recycle",
                        user = "hjx",
                        password = "123456",
                        charset = "utf8",
                        max_packet_size = 1024 * 1024,
                    }

                    if not ok then
                        ngx.say("failed to connect: ", err, ": ", errcode, " ", sqlstate)
                        return
                    end

                    ngx.say("connected to mysql.")

                    local res, err, errcode, sqlstate =
                        db:query("drop table if exists cats")
                    if not res then
                        ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                        return
                    end

                    res, err, errcode, sqlstate =
                        db:query("create table cats "
                                .. "(id serial primary key, "
                                .. "name varchar(5))")
                    if not res then
                        ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                        return
                    end

                    ngx.say("table cats created.")

                    res, err, errcode, sqlstate =
                        db:query("insert into cats (name) "
                                .. "values (\'Bob\'),(\'\'),(null)")
                    if not res then
                        ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                        return
                    end

                    ngx.say(res.affected_rows, " rows inserted into table cats ",
                            "(last insert id: ", res.insert_id, ")")

                    -- run a select query, expected about 10 rows in
                    -- the result set:
                    res, err, errcode, sqlstate =
                        db:query("select * from cats order by id asc", 10)
                    if not res then
                        ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                        return
                    end

                    local cjson = require "cjson"
                    ngx.say("result: ", cjson.encode(res))

                    -- put it into the connection pool of size 100,
                    -- with 10 seconds max idle timeout
                    local ok, err = db:set_keepalive(10000, 100)
                    if not ok then
                        ngx.say("failed to set keepalive: ", err)
                        return
                    end

                    -- or just close the connection right away:
                    -- local ok, err = db:close()
                    -- if not ok then
                    --     ngx.say("failed to close: ", err)
                    --     return
                    -- end
                ';
            }
        location /test1 {
            default_type text/html;
                content_by_lua '
                    local mysql = require "resty.mysql"
                    local db, err = mysql:new()
                    if not db then
                        ngx.print("failed to instantiate mysql: ", err)
                        return
                    end

                    db:set_timeout(1000) -- 1 sec

                    -- or connect to a unix domain socket file listened
                    -- by a mysql server:
                    --     local ok, err, errcode, sqlstate =
                    --           db:connect{
                    --              path = "/path/to/mysql.sock",
                    --              database = "ngx_test",
                    --              user = "ngx_test",
                    --              password = "ngx_test" }

                    local ok, err, errcode, sqlstate = db:connect{
                        host = "119.29.141.207",
                        port = 3306,
                        database = "recycle",
                        user = "hjx",
                        password = "123456",
                        charset = "utf8",
                        max_packet_size = 1024 * 1024,
                    }

                    if not ok then
                        ngx.print("failed to connect: ", err, ": ", errcode, " ", sqlstate)
                        return
                    end

                    ngx.print("connected to mysql.")

                    local res, err, errcode, sqlstate =
                        db:query("drop table if exists cats")
                    if not res then
                        ngx.print("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                        return
                    end

                    res, err, errcode, sqlstate =
                        db:query("create table cats "
                                .. "(id serial primary key, "
                                .. "name varchar(5))")
                    if not res then
                        ngx.print("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                        return
                    end

                    ngx.print("table cats created.")

                    res, err, errcode, sqlstate =
                        db:query("insert into cats (name) "
                                .. "values (\'Bob\'),(\'\'),(null)")
                    if not res then
                        ngx.print("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                        return
                    end

                    ngx.print(res.affected_rows, " rows inserted into table cats ",
                            "(last insert id: ", res.insert_id, ")")

                    -- run a select query, expected about 10 rows in
                    -- the result set:
                    res, err, errcode, sqlstate =
                        db:query("select * from cats order by id asc", 10)
                    if not res then
                        ngx.print("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                        return
                    end

                    local cjson = require "cjson"
                    ngx.print("result: ", cjson.encode(res))

                    -- put it into the connection pool of size 100,
                    -- with 10 seconds max idle timeout
                    local ok, err = db:set_keepalive(10000, 100)
                    if not ok then
                        ngx.print("failed to set keepalive: ", err)
                        return
                    end

                    -- or just close the connection right away:
                    -- local ok, err = db:close()
                    -- if not ok then
                    --     ngx.print("failed to close: ", err)
                    --     return
                    -- end
                ';
            }
        location /test {
                content_by_lua '
                    local mysql = require "resty.mysql"
                    local db, err = mysql:new()
                    if not db then
                        ngx.say("failed to instantiate mysql: ", err)
                        return
                    end

                    db:set_timeout(1000) -- 1 sec

                    -- or connect to a unix domain socket file listened
                    -- by a mysql server:
                    --     local ok, err, errcode, sqlstate =
                    --           db:connect{
                    --              path = "/path/to/mysql.sock",
                    --              database = "ngx_test",
                    --              user = "ngx_test",
                    --              password = "ngx_test" }

                    local ok, err, errcode, sqlstate = db:connect{
                        host = "119.29.141.207",
                        port = 3306,
                        database = "recycle",
                        user = "hjx",
                        password = "123456",
                        charset = "utf8",
                        max_packet_size = 1024 * 1024,
                    }

                    if not ok then
                        ngx.say("failed to connect: ", err, ": ", errcode, " ", sqlstate)
                        return
                    end

                    ngx.say("connected to mysql.")

                    local res, err, errcode, sqlstate =
                        db:query("drop table if exists cats")
                    if not res then
                        ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                        return
                    end

                    res, err, errcode, sqlstate =
                        db:query("create table cats "
                                .. "(id serial primary key, "
                                .. "name varchar(5))")
                    if not res then
                        ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                        return
                    end

                    ngx.say("table cats created.")

                    res, err, errcode, sqlstate =
                        db:query("insert into cats (name) "
                                .. "values (\'Bob\'),(\'\'),(null)")
                    if not res then
                        ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                        return
                    end

                    ngx.say(res.affected_rows, " rows inserted into table cats ",
                            "(last insert id: ", res.insert_id, ")")

                    -- run a select query, expected about 10 rows in
                    -- the result set:
                    res, err, errcode, sqlstate =
                        db:query("select * from cats order by id asc", 10)
                    if not res then
                        ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                        return
                    end

                    local cjson = require "cjson"
                    ngx.say("result: ", cjson.encode(res))

                    -- put it into the connection pool of size 100,
                    -- with 10 seconds max idle timeout
                    local ok, err = db:set_keepalive(10000, 100)
                    if not ok then
                        ngx.say("failed to set keepalive: ", err)
                        return
                    end

                    -- or just close the connection right away:
                    -- local ok, err = db:close()
                    -- if not ok then
                    --     ngx.say("failed to close: ", err)
                    --     return
                    -- end
                ';
            }
        location /openresty {
                default_type text/html;
                content_by_lua '
                    ngx.say("123")
                ';
            }
            location /redis {
                #internal;
                #set_unescape_uri $key $arg_key;
                #redis2_query get $key;
                #redis2_pass 127.0.0.1:6379;
        }
        location / {
                set $target '';
                access_by_lua '
                    local key = ngx.var.http_user_agent
                    local res = ngx.location.capture(
                        "/redis", { args = { key = key } }
                    )

                    print("key: ", key)
            ngx.log(ngx.ERR, "key: ", key)
                    if res.status ~= 200 then
                        ngx.log(ngx.ERR, "redis server returned bad status: ",
                            res.status)
                        ngx.exit(res.status)
                    end

                    if not res.body then
                        ngx.log(ngx.ERR, "redis returned empty body")
                        ngx.exit(500)
                    end

                    local parser = require "redis.parser"
                    local server, typ = parser.parse_reply(res.body)
                    if typ ~= parser.BULK_REPLY or not server then
                        ngx.log(ngx.ERR, "bad redis response: ", res.body)
                        ngx.exit(500)
                    end

                    print("server: ", server)

                    ngx.var.target = server
                ';
        # proxy_pass http://$target/index.html;
        proxy_pass http://www.baidu.com;
        #proxy_pass http://$target;
            }
            #error_page  404              /404.html;

            # redirect server error pages to the static page /50x.html
            #
            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }

            # proxy the PHP scripts to Apache listening on 127.0.0.1:80
            #
            #location ~ \.php$ {
            #    proxy_pass   http://127.0.0.1;
            #}

            # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
            #
            #location ~ \.php$ {
            #    root           html;
            #    fastcgi_pass   127.0.0.1:9000;
            #    fastcgi_index  index.php;
            #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
            #    include        fastcgi_params;
            #}

            # deny access to .htaccess files, if Apache's document root
            # concurs with nginx's one
            #
            #location ~ /\.ht {
            #    deny  all;
            #}
        }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
